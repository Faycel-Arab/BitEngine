{"version":3,"file":"math.min.js","sources":["../src/Point.js","../src/ObservablePoint.js","../src/const.js","../src/Matrix.js","../src/GroupD8.js","../src/Transform.js","../src/shapes/Rectangle.js","../src/shapes/Circle.js","../src/shapes/Ellipse.js","../src/shapes/Polygon.js","../src/shapes/RoundedRectangle.js"],"sourcesContent":["/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Point\n{\n    /**\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    clone()\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy from\n     * @returns {PIXI.IPoint} Returns itself.\n     */\n    copyFrom(p)\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    copyTo(p)\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPoint} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p)\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    set(x, y)\n    {\n        this.x = x || 0;\n        this.y = y || ((y !== 0) ? this.x : 0);\n    }\n}\n","/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * An ObservablePoint is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n */\nexport default class ObservablePoint\n{\n    /**\n     * @param {Function} cb - callback when changed\n     * @param {object} scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb, scope, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overidden otherwise they will default\n     * to the clone object's values.\n     *\n     * @override\n     * @param {Function} [cb=null] - callback when changed\n     * @param {object} [scope=null] - owner of callback\n     * @return {PIXI.ObservablePoint} a copy of the point\n     */\n    clone(cb = null, scope = null)\n    {\n        const _cb = cb || this.cb;\n        const _scope = scope || this.scope;\n\n        return new ObservablePoint(_cb, _scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    set(x, y)\n    {\n        const _x = x || 0;\n        const _y = y || ((y !== 0) ? _x : 0);\n\n        if (this._x !== _x || this._y !== _y)\n        {\n            this._x = _x;\n            this._y = _y;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy from.\n     * @returns {PIXI.IPoint} Returns itself.\n     */\n    copyFrom(p)\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    copyTo(p)\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPoint} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p)\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get x()\n    {\n        return this._x;\n    }\n\n    set x(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get y()\n    {\n        return this._y;\n    }\n\n    set y(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {(PIXI.Point|PIXI.ObservablePoint)} IPoint\n */\n","/**\n * Two Pi.\n *\n * @static\n * @constant {number} PI_2\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @constant {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @constant {number} DEG_TO_RAD\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @constant\n * @name SHAPES\n * @memberof PIXI\n * @type {object}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nexport const SHAPES = {\n    POLY: 0,\n    RECT: 1,\n    CIRC: 2,\n    ELIP: 3,\n    RREC: 4,\n};\n\n","import Point from './Point';\nimport { PI_2 } from './const';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @class\n * @memberof PIXI\n */\nexport default class Matrix\n{\n    /**\n     * @param {number} [a=1] - x scale\n     * @param {number} [b=0] - x skew\n     * @param {number} [c=0] - y skew\n     * @param {number} [d=1] - y scale\n     * @param {number} [tx=0] - x translation\n     * @param {number} [ty=0] - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.a = a;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.b = b;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.c = c;\n\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.d = d;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.tx = tx;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.ty = ty;\n\n        this.array = null;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     *\n     * @param {number[]} array - The array that the matrix will be populated from.\n     */\n    fromArray(array)\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * sets the matrix properties\n     *\n     * @param {number} a - Matrix component\n     * @param {number} b - Matrix component\n     * @param {number} c - Matrix component\n     * @param {number} d - Matrix component\n     * @param {number} tx - Matrix component\n     * @param {number} ty - Matrix component\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    set(a, b, c, d, tx, ty)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     *\n     * @param {boolean} transpose - Whether we need to transpose the matrix or not\n     * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @return {number[]} the newly created array which contains the matrix\n     */\n    toArray(transpose, out)\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     *\n     * @param {PIXI.Point} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply(pos, newPos)\n    {\n        newPos = newPos || new Point();\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     *\n     * @param {PIXI.Point} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse(pos, newPos)\n    {\n        newPos = newPos || new Point();\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     *\n     * @param {number} x How much to translate x by\n     * @param {number} y How much to translate y by\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    translate(x, y)\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     *\n     * @param {number} x The amount to scale horizontally\n     * @param {number} y The amount to scale vertically\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    scale(x, y)\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     *\n     * @param {number} angle - The angle in radians.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    rotate(angle)\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to append.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    append(matrix)\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     *\n     * @param {number} x - Position on the x axis\n     * @param {number} y - Position on the y axis\n     * @param {number} pivotX - Pivot on the x axis\n     * @param {number} pivotY - Pivot on the y axis\n     * @param {number} scaleX - Scale on the x axis\n     * @param {number} scaleY - Scale on the y axis\n     * @param {number} rotation - Rotation in radians\n     * @param {number} skewX - Skew on the x axis\n     * @param {number} skewY - Skew on the y axis\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY)\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to prepend\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    prepend(matrix)\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     *\n     * @param {PIXI.Transform} transform - The transform to apply the properties to.\n     * @return {PIXI.Transform} The transform with the newly applied properties\n     */\n    decompose(transform)\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx;\n        transform.position.y = this.ty;\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    invert()\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    identity()\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     *\n     * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n     */\n    clone()\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy to.\n     * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix)\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @return {PIXI.Matrix} this\n     */\n    copyFrom(matrix)\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    static get IDENTITY()\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    static get TEMP_MATRIX()\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group of order 16\nimport Matrix from './Matrix';\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\nconst tempMatrices = [];\n\nconst mul = [];\n\nfunction signum(x)\n{\n    if (x < 0)\n    {\n        return -1;\n    }\n    if (x > 0)\n    {\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction init()\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row = [];\n\n        mul.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        tempMatrices.push(mat);\n    }\n}\n\ninit();\n\n/**\n * Implements Dihedral Group D_8, see [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html},\n * D8 is the same but with diagonals. Used for texture rotations.\n *\n * Vector xX(i), xY(i) is U-axis of sprite with rotation i\n * Vector yY(i), yY(i) is V-axis of sprite with rotation i\n * Rotations: 0 grad (0), 90 grad (2), 180 grad (4), 270 grad (6)\n * Mirrors: vertical (8), main diagonal (10), horizontal (12), reverse diagonal (14)\n * This is the small part of gameofbombs.com portal system. It works.\n *\n * @author Ivan @ivanpopelyshev\n * @class\n * @memberof PIXI\n */\nconst GroupD8 = {\n    E: 0,\n    SE: 1,\n    S: 2,\n    SW: 3,\n    W: 4,\n    NW: 5,\n    N: 6,\n    NE: 7,\n    MIRROR_VERTICAL: 8,\n    MIRROR_HORIZONTAL: 12,\n    uX: (ind) => ux[ind],\n    uY: (ind) => uy[ind],\n    vX: (ind) => vx[ind],\n    vY: (ind) => vy[ind],\n    inv: (rotation) =>\n    {\n        if (rotation & 8)\n        {\n            return rotation & 15;\n        }\n\n        return (-rotation) & 7;\n    },\n    add: (rotationSecond, rotationFirst) => mul[rotationSecond][rotationFirst],\n    sub: (rotationSecond, rotationFirst) => mul[rotationSecond][GroupD8.inv(rotationFirst)],\n\n    /**\n     * Adds 180 degrees to rotation. Commutative operation.\n     *\n     * @memberof PIXI.GroupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} rotated number\n     */\n    rotate180: (rotation) => rotation ^ 4,\n\n    /**\n     * Direction of main vector can be horizontal, vertical or diagonal.\n     * Some objects work with vertical directions different.\n     *\n     * @memberof PIXI.GroupD8\n     * @param {number} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation) => (rotation & 3) === 2,\n\n    /**\n     * @memberof PIXI.GroupD8\n     * @param {number} dx - TODO\n     * @param {number} dy - TODO\n     *\n     * @return {number} TODO\n     */\n    byDirection: (dx, dy) =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return GroupD8.S;\n            }\n\n            return GroupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return GroupD8.E;\n            }\n\n            return GroupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return GroupD8.SE;\n            }\n\n            return GroupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return GroupD8.NE;\n        }\n\n        return GroupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     *\n     * @memberof PIXI.GroupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {number} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix, rotation, tx = 0, ty = 0) =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat = tempMatrices[GroupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n\nexport default GroupD8;\n","import ObservablePoint from './ObservablePoint';\nimport Matrix from './Matrix';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @memberof PIXI\n */\nexport default class Transform\n{\n    constructor()\n    {\n        /**\n         * The global matrix transform. It can be swapped temporarily by some functions like getLocalBounds()\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.worldTransform = new Matrix();\n\n        /**\n         * The local matrix transform\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.localTransform = new Matrix();\n\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n\n        this._cx = 1; // cos rotation + skewY;\n        this._sx = 0; // sin rotation + skewY;\n        this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @private\n     */\n    onChange()\n    {\n        this._localID++;\n    }\n\n    /**\n     * Called when skew or rotation changes\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n\nTransform.IDENTITY = new Transform();\n","import { SHAPES } from '../const';\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Rectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left()\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right()\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top()\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom()\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Rectangle}\n     */\n    static get EMPTY()\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone()\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copyFrom(rectangle)\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.\n     * @return {PIXI.Rectangle} Returns given parameter.\n     */\n    copyTo(rectangle)\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     *\n     * @param {number} paddingX - The horizontal padding amount.\n     * @param {number} paddingY - The vertical padding amount.\n     */\n    pad(paddingX, paddingY)\n    {\n        paddingX = paddingX || 0;\n        paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);\n\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     */\n    fit(rectangle)\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     */\n    ceil(resolution = 1, eps = 0.001)\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     */\n    enlarge(rectangle)\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n    }\n}\n","import Rectangle from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Circle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this circle\n     * @param {number} [y=0] - The Y coordinate of the center of this circle\n     * @param {number} [radius=0] - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return {PIXI.Circle} a copy of the Circle\n     */\n    clone()\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Circle\n     */\n    contains(x, y)\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return {PIXI.Rectangle} the framing rectangle\n    */\n    getBounds()\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n}\n","import Rectangle from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Ellipse\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this ellipse\n     * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n     * @param {number} [halfWidth=0] - The half width of this ellipse\n     * @param {number} [halfHeight=0] - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = halfWidth;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = halfHeight;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} a copy of the ellipse\n     */\n    clone()\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coords are within this ellipse\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    getBounds()\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n}\n","import Point from '../Point';\nimport { SHAPES } from '../const';\n\n/**\n * A class to define a shape via user defined co-orinates.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Polygon\n{\n    /**\n     * @param {PIXI.Point[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points)\n    {\n        if (Array.isArray(points[0]))\n        {\n            points = points[0];\n        }\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (points[0] instanceof Point)\n        {\n            const p = [];\n\n            for (let i = 0, il = points.length; i < il; i++)\n            {\n                p.push(points[i].x, points[i].y);\n            }\n\n            points = p;\n        }\n\n        /**\n         * An array of the points of this polygon\n         *\n         * @member {number[]}\n         */\n        this.points = points;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.POLY\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.POLY;\n\n        /**\n         * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n         * @member {boolean}\n         * @default true\n         */\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon\n     *\n     * @return {PIXI.Polygon} a copy of the polygon\n     */\n    clone()\n    {\n        const polygon = new Polygon(this.points.slice());\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this polygon\n     */\n    contains(x, y)\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nexport default class RoundedRectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [width=0] - The overall width of this rounded rectangle\n     * @param {number} [height=0] - The overall height of this rounded rectangle\n     * @param {number} [radius=20] - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = width;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = height;\n\n        /**\n         * @member {number}\n         * @default 20\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle\n     *\n     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n     */\n    clone()\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)\n                || (x >= this.x + this.radius && x <= this.x + this.width - this.radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + this.radius);\n                let dy = y - (this.y + this.radius);\n                const radius2 = this.radius * this.radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"],"names":["Point","x","y","this","clone","copyFrom","p","set","copyTo","equals","ObservablePoint","cb","scope","_x","_y","_cb","_scope","const","call","prototypeAccessors","value","PI_2","Math","PI","RAD_TO_DEG","DEG_TO_RAD","SHAPES","POLY","RECT","CIRC","ELIP","RREC","Matrix","a","b","c","d","tx","ty","array","fromArray","toArray","transpose","out","Float32Array","apply","pos","newPos","applyInverse","id","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","atan2","delta","abs","skew","sqrt","position","invert","n","identity","staticAccessors","IDENTITY","TEMP_MATRIX","ux","uy","vx","vy","tempMatrices","mul","signum","let","i","row","push","j","_ux","_uy","_vx","_vy","k","mat","init","GroupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MIRROR_HORIZONTAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","dx","dy","matrixAppendRotationInv","Transform","worldTransform","localTransform","onChange","pivot","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","updateLocalTransform","lt","updateTransform","parentTransform","pt","wt","setFromMatrix","Rectangle","width","height","Number","type","left","right","top","bottom","EMPTY","rectangle","contains","pad","paddingX","paddingY","fit","x1","max","x2","min","y1","y2","ceil","resolution","eps","floor","enlarge","Circle","radius","r2","getBounds","Ellipse","halfWidth","halfHeight","normx","normy","Polygon","Array","isArray","points","il","length","closeStroke","polygon","slice","inside","xi","yi","xj","yj","RoundedRectangle","radius2"],"mappings":"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"}