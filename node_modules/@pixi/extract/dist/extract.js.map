{"version":3,"file":"extract.js","sources":["../src/Extract.js","../src/index.js"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI.extract\n */\nexport default class Extract\n{\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.extract.Extract} extract\n         * @memberof PIXI.Renderer#\n         * @see PIXI.extract.Extract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target, format, quality)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target, format, quality)\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        canvasData.data.set(webglPixels);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            canvasBuffer.context.scale(1, -1);\n            canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        return webglPixels;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n}\n","/**\n * This namespace provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @namespace PIXI.extract\n */\nexport { default as Extract } from './Extract';\n"],"names":["const","Rectangle","let","RenderTexture","CanvasRenderTarget"],"mappings":"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"}